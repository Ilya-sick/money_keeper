# money_keeper

from config import TOKEN
import logging
from aiogram import Bot, Dispatcher, executor, types
import expenses
import db



API_TOKEN = TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "I'm MoneyKeeperBot!üòä\n"
        '–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:  "–º–∞–≥–∞–∑–∏–Ω 50",  "–¢–∞–∫—Å–∏ 200"\n'
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '/categories'\n"
        )

@dp.message_handler(commands=['categories'])
async def show_all_categories(message: types.Message):
    """
    This handler will be called when user sends `/categories'
    """
    for cat_key in expenses.categories:
        show_all_categories = f"‚Ä¢ {expenses.categories[cat_key][0]} ({', '.join(expenses.categories[cat_key][1:])})"
        await message.answer(
            f"{show_all_categories}"
            )
    await message.answer(
        '–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:  "–º–∞–≥–∞–∑–∏–Ω 50",  "–¢–∞–∫—Å–∏ 200"\n'
        )

@dp.message_handler(commands=['expenses'])
async def get_expense_to_user(message: types.Message):
    try:
        show_expense = db.get_expense(message.from_user.id)
        await message.answer(
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: "–º–µ—Å—è—Ü", "–Ω–µ–¥–µ–ª—è", "–¥–µ–Ω—å".\n'
            f"{show_expense}"
        )
    except:
        pass

# handling users message
@dp.message_handler()
async def add_expense(message: types.Message):
    try:
        expense = expenses.add_expense(message.text, message.from_user.id)
        text_answer = f'–ì–æ—Ç–æ–≤–æ, {message.from_user.first_name}! {expense}' 
        await message.answer(text_answer)
    except:
        await message.reply(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞üòî\n"
            '–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:  "–º–∞–≥–∞–∑–∏–Ω 50",  "–¢–∞–∫—Å–∏ 200"\n'
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '/categories'\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: '/expenses'\n"
            )


    

        




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)