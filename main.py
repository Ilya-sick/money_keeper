# money_keeper

from config import TOKEN
import logging
from aiogram import Bot, Dispatcher, executor, types
import expenses



API_TOKEN = TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "I'm MoneyKeeperBot!üòä\n"
        "–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: '—Ç–∞–∫—Å–∏ 50'\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '/categories'\n"
        )

@dp.message_handler(commands=['categories'])
async def show_all_categories(message: types.Message):
    """
    This handler will be called when user sends `/categories'
    """
    for cat_key in expenses.categories:
        show_all_categories = f"{expenses.categories[cat_key]}"
        await message.answer(
            f"{show_all_categories}\n"
            )
    await message.answer(
        "–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: '—Ç–∞–∫—Å–∏ 50'\n"
        )
    


# handling users message
@dp.message_handler()
async def add_expense(message: types.Message):
    try:
        expense = expenses.add_expense(message.text)
        text_answer = f'–ì–æ—Ç–æ–≤–æ! {expense}'
        await message.answer(text_answer)
    except:
        await message.reply(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞üòî\n"
            "–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: '—Ç–∞–∫—Å–∏ 50'\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '/categories'\n"
            )
    

        




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)